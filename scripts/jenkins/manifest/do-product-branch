#!/usr/bin/env python

import json
import xml.etree.ElementTree as ET
import argparse
import sys
from subprocess import call, check_call, check_output
import os
import io
import shutil
from datetime import datetime
import time
import tarfile

# This is a foreshortened version of create-build-manifest that just
# populates build-team-manifests for a new product branch.

# Most of this script is involved with computing important values
# for producing a new manifest. These important values are represented
# as all-caps CONSTANTS once they are finally set.


def insert_child_annot(parent, name, value):
  annot = parent.find("annotation[@name='{}']".format(name))
  if annot is not None:
    parent.remove(annot)  
  annot = ET.Element("annotation")
  annot.set("name", name)
  annot.set("value", value)
  annot.tail = "\n    "
  parent.insert(0, annot)

def create_stub_manifest(input_manifest, config, source_sha=None):
  """
  Create a stub manifest for legacy builds
  """
  global manifests, MANIFEST_PROJECT, MANIFEST_DIR
  start_build = int(config.get("start_build", "1"))
  release = config.get("release")
  manifest_branch = config.get("branch", "master")
  if source_sha is not None:
    parent_branch = source_sha
  else:
    parent = config.get("parent")
    if parent is not None:
      parent_branch = manifests[parent].get("branch", "master")
    else:
      parent_branch = "master"
  print "Setting {} build number to {}".format(input_manifest, start_build)
  # Sync build-team-manifests project and checkout/create manifest_branch
  os.chdir("..")
  if not os.path.isdir("build-team-manifests"):
    check_call(["git", "clone",
      "ssh://git@github.com/{}/build-team-manifests".format(MANIFEST_PROJECT)])
  os.chdir("build-team-manifests")
  check_call(["git", "reset", "--hard"])
  print "Updating build-team-manifests repository..."
  check_call(["git", "fetch", "--all"])
  remote_branch_exists = call(["git", "show-ref", "--verify", "--quiet",
    "refs/remotes/origin/{}".format(manifest_branch)])
  if remote_branch_exists == 0:
    check_call(["git", "checkout", "-B", manifest_branch,
      "remotes/origin/{}".format(manifest_branch)])
  else:
    print "Creating new {} branch for build-team-manifests".format(manifest_branch)
    check_call(["git", "checkout", "-b", manifest_branch, parent_branch])

  # Ensure build manifest directory exists
  # QQQ This path *SHOULD* have PRODUCT in it, but for legacy things like
  # watson, it's not there in build-team-manifests
  build_manifest_filename = os.path.abspath("{}.xml".format(release))
  build_manifest_dir = os.path.dirname(build_manifest_filename)
  if not os.path.isdir(build_manifest_dir):
    os.makedirs(build_manifest_dir)
  print "Updating build manifest {} for manifest {}".format(build_manifest_filename, input_manifest)

  # We don't really care about the contents of the new manifest other than
  # it being a legit repo manifest with a "build" project, so just use the
  # input manifest. Get the version number while we're there.
  target_manifest = ET.parse(os.path.join(MANIFEST_DIR, PRODUCT, input_manifest))
  # Remove some other project to ensure there are repo diffs
  proj_element = target_manifest.find("./project[@name='ns_server']")
  target_manifest.getroot().remove(proj_element)
  build_element = target_manifest.find("./project[@name='build']")
  version_annot = build_element.find("annotation[@name='VERSION']")
  if version_annot is not None:
    version = version_annot.get("value")
  else:
    version = "0.0.0"
  start_build -= 1
  insert_child_annot(build_element, "BLD_NUM", str(start_build))
  insert_child_annot(build_element, "PRODUCT", PRODUCT)
  insert_child_annot(build_element, "PRODUCT_BRANCH", manifest_branch)
  insert_child_annot(build_element, "RELEASE", release)
  target_manifest.write(build_manifest_filename)

  # Compute the commit message - dates in python are a bit hard
  now = datetime.now()
  tz = time.tzname[time.localtime().tm_isdst]
  commit_msg = "{} {} '{}' BRANCH set to {}-{}\n\n{} {}{}".format(
    PRODUCT, release, manifest_branch, version, start_build,
    now.strftime("%Y/%m/%d %H:%M:%S"), tz,
    "" if remote_branch_exists == 0 else " (first branch build)")

  # Finally, push the new build manifest back to GitHub
  check_call(["git", "add", build_manifest_filename])
  check_call(["git", "commit", "-m", commit_msg])
  check_call(["git", "push", "origin",
    "{0}:refs/heads/{0}".format(manifest_branch)])


# Command-line args
parser = argparse.ArgumentParser()
parser.add_argument("source", type=str, help="Manifest path to branch from")
parser.add_argument("target", type=str, help="Manifest path to initialize as new branch")
parser.add_argument("-p", "--product", type=str, default="couchbase-server",
                    help="Product to branch")
parser.add_argument("--source-sha", type=str, default=None,
                    help="build-team-manifests SHA from which to branch target")
parser.add_argument("--manifest-project", type=str, default="couchbase",
                    help="Alternate github.com account for manifest")
args = parser.parse_args()
SOURCE = args.source
TARGET = args.target
SOURCE_SHA = args.source_sha
PRODUCT = args.product
MANIFEST_PROJECT = args.manifest_project
MANIFEST_DIR = os.path.abspath("manifest")

# Sync manifest project
if not os.path.isdir("manifest"):
  check_call(["git", "clone",
    "git://github.com/{}/manifest".format(MANIFEST_PROJECT)])
os.chdir("manifest")
print "Updating manifest repository..."
check_call(["git", "pull"])

# Load configuration JSON file for product (if exists)
product_config_filename = "{}/product-config.json".format(PRODUCT)
if os.path.exists(product_config_filename):
  with io.open(product_config_filename) as product_config_file:
    product_config = json.load(product_config_file)
else:
  print "Product configuration file for {} required!".format(PRODUCT)
  sys.exit(4)

# Load source and target metadata from JSON
manifests = product_config.get("manifests")
try:
  source_config = manifests[SOURCE]
  target_config = manifests[TARGET]
except KeyError:
  print "Manifest configuration missing for source or target!"
  sys.exit(5)

create_stub_manifest(TARGET, target_config, SOURCE_SHA)
create_stub_manifest(SOURCE, source_config)

